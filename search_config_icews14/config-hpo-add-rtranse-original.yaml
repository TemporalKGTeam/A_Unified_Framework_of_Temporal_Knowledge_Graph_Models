console:
  quiet: False
  format: {}
  echo: True
  log_level: info

#local
task:
  folder: /home/ubuntu/gengyuan/search_experiments
  type: train
  device: 'cuda'
  reciprocal_training: false

random_seed:
  default: -1
  python: -1
  torch: -1
  numpy: -1
  numba: -1


# local
dataset:
  folder: /home/ubuntu/gengyuan/tkg-framework/data/icews14

  # indexes mapping [false, true]
  # TODO 可以保存到cache
  mapping: False
  filter: False
  temporal:
    resolution: "day"
    index: True
    float: False
  args: ~

  name: 'icews14'
  num_entities: -1
  num_relations: -1
  pickle: True

negative_sampling:
  type: 'time_agnostic'
  num_samples: 500
  filter: False
  as_matrix: True
  target: both
  args: ~


model:
  type: translation_transe_model

  embedding:
    global:
      dim: 512
      init: xavier_uniform

    entity:
      pos_aware: True
      keys:
        real:
          dim: 160
          init: xavier_uniform
    relation:
      keys:
        real:
          dim: 160
          init: xavier_uniform
    temporal:
      keys:
        real:
          dim: 160
          init: xavier_uniform
  fusion:
    type: addition_fusion
    target:
      - 'rel+temp'
    p: 0.5
    args: ~
  transformation:
    type: translation_tf
    gamma: 100
    p: 1
    range: 10
    args: ~
  scorer:
    inverse: True

  args: ~



train:
  # Split used for training (specified under 'data.files').
  split: train
  type: negative_sampling

  loss:
    type: cross_entropy_loss
    args: ~

  max_epochs: 100

  loader:
    num_workers: 0
    pin_memory: False
    drop_last: False
    timeout: 0

  valid:
    split: test # in [test or valid]
    every: 5
    batch_size: 512
    subbatch_size: -1
    filter: time-aware  # in [off, static, time-aware]
    ordering: optimistic    # in [optimistic, peesimistic]
    k: [1, 3, 10]

    early_stopping:
      early_stop: True
      patience: 30
      epochs: 50
      metric_thresh: 0.2

  batch_size: 512
  subbatch_size: -1
  subbatch_adaptive: True
  optimizer:
    type: Adam
    args:
      lr: 0.007532405044242736

    default:
      type: Adam           # sgd, adagrad, adam

      args:
        +++: +++

  regularizer:
    entity_reg:
      type: none_regularize
      weight: 0.0
      args: ~
    relation_reg:
      type: none_regularize
      weight: 0.0
      args: ~
    temporal_reg:
      type: n3_regularize
      weight: 1.9513135030445875e-17
      args: ~
  inplace_regularizer: ~

  lr_scheduler: ""

  lr_scheduler_args:
    +++: +++

  trace_level: epoch           # batch, epoch

  checkpoint:
    every: 100
    keep: 3

  auto_correct: False
  abort_on_nan: True
  visualize_graph: False

eval:
  filter: time-aware
  ordering: descending
  preference: optimistic
  k: [1,3,10]


hpo:
  num_workers: -1
  num_trials: 20
  num_random_trials: 10
  hyperparam:
#    - name: model.embedding.global.dim
#      type: choice
#      values: [512, 256, 128, 100, 64]
#      value_type: int
#    - name: train.regularizer.temporal_reg.weight
#      type: range
#      bounds: [0.0, 0.1]
#      value_type: float
    - name: train.optimizer.args.lr
      type: range
      bounds: [0.0000001, 0.01]
      value_type: float
#    - name: model.fusion.p
#      type: choice
#      values: [0.0, 0.2, 0.4, 0.5, 0.6]
#      value_type: float
#    - name: task.reciprocal_training
#      type: choice
#      values: [true, false]
#      value_type: bool
#    - name: train.loss.type
#      type: choice
#      values: ['binary_cross_entropy_loss', 'cross_entropy_loss']
#      value_type: str
    - name: model.embedding.entity.pos_aware
      type: choice
      values: [False, True]
      value_type: bool

    # phase2
#    - name: model.embedding.global.init
#      type: choice
#      values: ['xavier_uniform', 'xavier_normal']
#      value_type: str
    - name: train.regularizer.entity_reg.type
      type: choice
      values: ['f2_regularize', 'lambda3_regularize']
      value_type: str
    - name: train.regularizer.entity_reg.weight
      type: range
      bounds: [0.0, 0.1]
      value_type: float
    - name: train.regularizer.relation_reg.type
      type: choice
      values: ['f2_regularize', 'lambda3_regularize']
      value_type: str
    - name: train.regularizer.relation_reg.weight
      type: range
      bounds: [0.0, 0.1]
      value_type: float


