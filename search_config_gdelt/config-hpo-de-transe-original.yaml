console:
  quiet: False
  format: {}
  echo: True
  log_level: info

#local
task:
  folder: /home/ubuntu/gengyuan/search_experiments
  type: train
  device: 'cuda'
  reciprocal_training: true

random_seed:
  default: -1
  python: -1
  torch: -1
  numpy: -1
  numba: -1


# local
dataset:
  folder: /home/ubuntu/gengyuan/tkg-framework/data/gdelt_m10

  # indexes mapping [false, true]
  # TODO 可以保存到cache
  mapping: False
  filter: False
  temporal:
    resolution: "day"
    index: False
    float: True
  args: ~

  name: 'gdelt-m10'
  num_entities: -1
  num_relations: -1
  pickle: True

negative_sampling:
  type: 'time_agnostic'
  num_samples: 500
  filter: False
  as_matrix: True
  target: both
  args: ~


model:
  type: de_pipeline_dropout_model

  p: 0.4

  embedding:
    global:
      dim: 160
      init: xavier_uniform

    entity:
      pos_aware: True
      keys:
        ent_embs:
          dim: 108
          init: xavier_uniform
        amps_y:
          dim: 52
          init: xavier_uniform
        amps_m:
          dim: 52
          init: xavier_uniform
        amps_d:
          dim: 52
          init: xavier_uniform
        freq_y:
          dim: 52
          init: xavier_uniform
        freq_m:
          dim: 52
          init: xavier_uniform
        freq_d:
          dim: 52
          init: xavier_uniform
        phi_y:
          dim: 52
          init: xavier_uniform
        phi_m:
          dim: 52
          init: xavier_uniform
        phi_d:
          dim: 52
          init: xavier_uniform
    relation:
      keys:
        real:
          dim: 160
          init: xavier_uniform
    temporal: ~
  fusion:
    type: diachronic_entity_fusion
    target:
      - 'ent+temp'
    l1_flag: True
    p: 0.4
    emb_dim: 160
    se: 0.32
    args: ~
  transformation:
    type: translation_tf
    gamma: 100
    p: 1
    range: 10
    args: ~
  scorer:
    inverse: True

  args: ~



train:
  # Split used for training (specified under 'data.files').
  split: train
  type: negative_sampling

  loss:
    type: binary_cross_entropy_loss
    args: ~

  max_epochs: 100


  loader:
    num_workers: 0
    pin_memory: False
    drop_last: False
    timeout: 0

  valid:
    split: test # in [test or valid]
    every: 5
    batch_size: 64
    subbatch_size: -1
    filter: time-aware  # in [off, static, time-aware]
    ordering: optimistic    # in [optimistic, peesimistic]
    k: [1, 3, 10]

    early_stopping:
      early_stop: True
      patience: 30
      epochs: 50
      metric_thresh: 0.1

  batch_size: 512
  subbatch_size: 64
  subbatch_adaptive: True
  optimizer:
    type: Adam
    args:
      lr: 0.001

    default:
      type: Adam           # sgd, adagrad, adam

      args:
        +++: +++

  regularizer:
    entity_reg:
      type: none_regularize
      weight: 0.0
      args: ~
    relation_reg:
      type: none_regularize
      weight: 0.0
      args: ~
#    temporal_reg:
#      type: no_regularize
#      weight: 0.01
#      args: ~
  inplace_regularizer: ~

  lr_scheduler: ""

  lr_scheduler_args:
    +++: +++

  trace_level: epoch           # batch, epoch

  checkpoint:
    every: 50
    keep: 3

  auto_correct: False
  abort_on_nan: True
  visualize_graph: False

eval:
  filter: time-aware
  ordering: descending
  preference: optimistic
  k: [1,3,10]


hpo:
  num_workers: -1
  num_trials: 60
  num_random_trials: 40
  hyperparam:
    - name: model.embedding.global.dim
      type: choice
      values: [256, 100]
      value_type: int
#    - name: train.batch_size
#      type: choice
#      values: [256, 512, 1024]
#      value_type: int
    - name: train.optimizer.args.lr
      type: range
      bounds: [0.000001, 0.01]
      value_type: float
    - name: model.fusion.se
      type: range
      bounds: [0.0, 1.0]
      value_type: float
    - name: model.embedding.global.init
      type: choice
      values: ['xavier_uniform', 'xavier_normal']
      value_type: str
    - name: train.loss.type
      type: choice
      values: ['binary_cross_entropy_loss', 'cross_entropy_loss']
      value_type: str
    - name: model.fusion.p
      type: choice
      values: [0.2, 0.4, 0.6]
      value_type: float
    - name: train.regularizer.entity_reg.type
      type: choice
      values: ['none_regularize', 'f2_regularize']
      value_type: str
    - name: train.regularizer.entity_reg.weight
      type: range
      bounds: [0.0, 0.1]
      value_type: float
    - name: train.regularizer.relation_reg.type
      type: choice
      values: ['none_regularize', 'f2_regularize']
      value_type: str
    - name: train.regularizer.relation_reg.weight
      type: range
      bounds: [0.0, 0.1]
      value_type: float
#    - name: train.regularizer.temporal_reg.weight
#      type: range
#      bounds: [0.0, 0.1]
#      value_type: float




